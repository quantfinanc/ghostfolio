"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertToInferred = convertToInferred;
const devkit_1 = require("@nx/devkit");
const aggregate_log_util_1 = require("@nx/devkit/src/generators/plugin-migrations/aggregate-log-util");
const executor_to_plugin_migrator_1 = require("@nx/devkit/src/generators/plugin-migrations/executor-to-plugin-migrator");
const build_post_target_transformer_1 = require("./lib/build-post-target-transformer");
const serve_post_target_transformer_1 = require("./lib/serve-post-target-transformer");
const plugin_1 = require("../../plugins/plugin");
const versions_1 = require("../../utils/versions");
async function convertToInferred(tree, options) {
    const projectGraph = await (0, devkit_1.createProjectGraphAsync)();
    const migrationLogs = new aggregate_log_util_1.AggregatedLog();
    const migratedProjects = await (0, executor_to_plugin_migrator_1.migrateProjectExecutorsToPlugin)(tree, projectGraph, '@nx/storybook/plugin', plugin_1.createNodesV2, {
        buildStorybookTargetName: 'build-storybook',
        serveStorybookTargetName: 'storybook',
        staticStorybookTargetName: 'static-storybook',
        testStorybookTargetName: 'test-storybook',
    }, [
        {
            executors: ['@nx/storybook:build'],
            postTargetTransformer: (0, build_post_target_transformer_1.buildPostTargetTransformer)(migrationLogs),
            targetPluginOptionMapper: (targetName) => ({
                buildStorybookTargetName: targetName,
            }),
        },
        {
            executors: ['@nx/storybook:storybook'],
            postTargetTransformer: (0, serve_post_target_transformer_1.servePostTargetTransformer)(migrationLogs),
            targetPluginOptionMapper: (targetName) => ({
                serveStorybookTargetName: targetName,
            }),
        },
    ], options.project);
    if (migratedProjects.size === 0) {
        throw new executor_to_plugin_migrator_1.NoTargetsToMigrateError();
    }
    if (!options.skipFormat) {
        await (0, devkit_1.formatFiles)(tree);
    }
    const installTask = (0, devkit_1.addDependenciesToPackageJson)(tree, {}, { storybook: versions_1.storybookVersion });
    return (0, devkit_1.runTasksInSerial)(installTask, () => {
        migrationLogs.flushLogs();
    });
}
exports.default = convertToInferred;
