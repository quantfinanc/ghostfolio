"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NxModuleFederationPlugin = void 0;
const utils_1 = require("../../../with-module-federation/rspack/utils");
const nx_module_federation_dev_server_plugin_1 = require("./nx-module-federation-dev-server-plugin");
class NxModuleFederationPlugin {
    constructor(_options, configOverride) {
        this._options = _options;
        this.configOverride = configOverride;
    }
    apply(compiler) {
        if (global.NX_GRAPH_CREATION) {
            return;
        }
        // This is required to ensure Module Federation will build the project correctly
        compiler.options.optimization.runtimeChunk = false;
        const isDevServer = !!process.env['WEBPACK_SERVE'];
        // TODO(colum): Add support for SSR
        const config = (0, utils_1.getModuleFederationConfig)(this._options.config);
        const sharedLibraries = config.sharedLibraries;
        const sharedDependencies = config.sharedDependencies;
        const mappedRemotes = config.mappedRemotes;
        new (require('@module-federation/enhanced/rspack').ModuleFederationPlugin)({
            name: this._options.config.name.replace(/-/g, '_'),
            filename: 'remoteEntry.js',
            exposes: this._options.config.exposes,
            remotes: mappedRemotes,
            shared: {
                ...(sharedDependencies ?? {}),
            },
            ...(this.configOverride ? this.configOverride : {}),
            runtimePlugins: this.configOverride
                ? this.configOverride.runtimePlugins ?? []
                : [],
            virtualRuntimeEntry: true,
        }).apply(compiler);
        if (sharedLibraries) {
            sharedLibraries.getReplacementPlugin().apply(compiler);
        }
        if (isDevServer) {
            new nx_module_federation_dev_server_plugin_1.NxModuleFederationDevServerPlugin({
                config: this._options.config,
                devServerConfig: {
                    ...(this._options.devServerConfig ?? {}),
                    host: this._options.devServerConfig?.host ?? 'localhost',
                },
            }).apply(compiler);
        }
    }
}
exports.NxModuleFederationPlugin = NxModuleFederationPlugin;
