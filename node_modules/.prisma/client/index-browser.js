
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.5.0
 * Query Engine version: 173f8d54f8d52e692c7e27e72a88314ec7aeff60
 */
Prisma.prismaVersion = {
  client: "6.5.0",
  engine: "173f8d54f8d52e692c7e27e72a88314ec7aeff60"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AccessScalarFieldEnum = {
  alias: 'alias',
  createdAt: 'createdAt',
  granteeUserId: 'granteeUserId',
  id: 'id',
  permissions: 'permissions',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.AccountScalarFieldEnum = {
  balance: 'balance',
  comment: 'comment',
  createdAt: 'createdAt',
  currency: 'currency',
  id: 'id',
  isExcluded: 'isExcluded',
  name: 'name',
  platformId: 'platformId',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.AccountBalanceScalarFieldEnum = {
  accountId: 'accountId',
  createdAt: 'createdAt',
  date: 'date',
  id: 'id',
  updatedAt: 'updatedAt',
  userId: 'userId',
  value: 'value'
};

exports.Prisma.AnalyticsScalarFieldEnum = {
  activityCount: 'activityCount',
  country: 'country',
  dataProviderGhostfolioDailyRequests: 'dataProviderGhostfolioDailyRequests',
  lastRequestAt: 'lastRequestAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.ApiKeyScalarFieldEnum = {
  createdAt: 'createdAt',
  hashedKey: 'hashedKey',
  id: 'id',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.AuthDeviceScalarFieldEnum = {
  createdAt: 'createdAt',
  credentialId: 'credentialId',
  credentialPublicKey: 'credentialPublicKey',
  counter: 'counter',
  id: 'id',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.MarketDataScalarFieldEnum = {
  createdAt: 'createdAt',
  dataSource: 'dataSource',
  date: 'date',
  id: 'id',
  marketPrice: 'marketPrice',
  state: 'state',
  symbol: 'symbol'
};

exports.Prisma.OrderScalarFieldEnum = {
  accountId: 'accountId',
  accountUserId: 'accountUserId',
  comment: 'comment',
  createdAt: 'createdAt',
  currency: 'currency',
  date: 'date',
  fee: 'fee',
  id: 'id',
  isDraft: 'isDraft',
  quantity: 'quantity',
  symbolProfileId: 'symbolProfileId',
  type: 'type',
  unitPrice: 'unitPrice',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.PlatformScalarFieldEnum = {
  id: 'id',
  name: 'name',
  url: 'url'
};

exports.Prisma.PropertyScalarFieldEnum = {
  key: 'key',
  value: 'value'
};

exports.Prisma.SettingsScalarFieldEnum = {
  settings: 'settings',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.SymbolProfileScalarFieldEnum = {
  assetClass: 'assetClass',
  assetSubClass: 'assetSubClass',
  comment: 'comment',
  countries: 'countries',
  createdAt: 'createdAt',
  currency: 'currency',
  cusip: 'cusip',
  dataSource: 'dataSource',
  figi: 'figi',
  figiComposite: 'figiComposite',
  figiShareClass: 'figiShareClass',
  holdings: 'holdings',
  id: 'id',
  isin: 'isin',
  name: 'name',
  updatedAt: 'updatedAt',
  scraperConfiguration: 'scraperConfiguration',
  sectors: 'sectors',
  symbol: 'symbol',
  symbolMapping: 'symbolMapping',
  url: 'url',
  userId: 'userId'
};

exports.Prisma.SymbolProfileOverridesScalarFieldEnum = {
  assetClass: 'assetClass',
  assetSubClass: 'assetSubClass',
  countries: 'countries',
  holdings: 'holdings',
  name: 'name',
  sectors: 'sectors',
  symbolProfileId: 'symbolProfileId',
  updatedAt: 'updatedAt',
  url: 'url'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  createdAt: 'createdAt',
  expiresAt: 'expiresAt',
  id: 'id',
  price: 'price',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  userId: 'userId'
};

exports.Prisma.UserScalarFieldEnum = {
  accessToken: 'accessToken',
  authChallenge: 'authChallenge',
  createdAt: 'createdAt',
  id: 'id',
  provider: 'provider',
  role: 'role',
  thirdPartyId: 'thirdPartyId',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.AccessPermission = exports.$Enums.AccessPermission = {
  READ: 'READ',
  READ_RESTRICTED: 'READ_RESTRICTED'
};

exports.DataSource = exports.$Enums.DataSource = {
  ALPHA_VANTAGE: 'ALPHA_VANTAGE',
  COINGECKO: 'COINGECKO',
  EOD_HISTORICAL_DATA: 'EOD_HISTORICAL_DATA',
  FINANCIAL_MODELING_PREP: 'FINANCIAL_MODELING_PREP',
  GHOSTFOLIO: 'GHOSTFOLIO',
  GOOGLE_SHEETS: 'GOOGLE_SHEETS',
  MANUAL: 'MANUAL',
  RAPID_API: 'RAPID_API',
  YAHOO: 'YAHOO'
};

exports.MarketDataState = exports.$Enums.MarketDataState = {
  CLOSE: 'CLOSE',
  INTRADAY: 'INTRADAY'
};

exports.Type = exports.$Enums.Type = {
  BUY: 'BUY',
  DIVIDEND: 'DIVIDEND',
  FEE: 'FEE',
  INTEREST: 'INTEREST',
  ITEM: 'ITEM',
  LIABILITY: 'LIABILITY',
  SELL: 'SELL'
};

exports.AssetClass = exports.$Enums.AssetClass = {
  COMMODITY: 'COMMODITY',
  EQUITY: 'EQUITY',
  FIXED_INCOME: 'FIXED_INCOME',
  LIQUIDITY: 'LIQUIDITY',
  REAL_ESTATE: 'REAL_ESTATE'
};

exports.AssetSubClass = exports.$Enums.AssetSubClass = {
  BOND: 'BOND',
  CASH: 'CASH',
  COMMODITY: 'COMMODITY',
  CRYPTOCURRENCY: 'CRYPTOCURRENCY',
  ETF: 'ETF',
  MUTUALFUND: 'MUTUALFUND',
  PRECIOUS_METAL: 'PRECIOUS_METAL',
  PRIVATE_EQUITY: 'PRIVATE_EQUITY',
  STOCK: 'STOCK'
};

exports.Provider = exports.$Enums.Provider = {
  ANONYMOUS: 'ANONYMOUS',
  GOOGLE: 'GOOGLE',
  INTERNET_IDENTITY: 'INTERNET_IDENTITY'
};

exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  DEMO: 'DEMO',
  INACTIVE: 'INACTIVE',
  USER: 'USER'
};

exports.Prisma.ModelName = {
  Access: 'Access',
  Account: 'Account',
  AccountBalance: 'AccountBalance',
  Analytics: 'Analytics',
  ApiKey: 'ApiKey',
  AuthDevice: 'AuthDevice',
  MarketData: 'MarketData',
  Order: 'Order',
  Platform: 'Platform',
  Property: 'Property',
  Settings: 'Settings',
  SymbolProfile: 'SymbolProfile',
  SymbolProfileOverrides: 'SymbolProfileOverrides',
  Subscription: 'Subscription',
  Tag: 'Tag',
  User: 'User'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
